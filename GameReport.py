#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class GameReportBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(GameReportBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class GameReportParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=GameReportBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(GameReportParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _pre_(self):  # noqa
        self._token('<pre>')

    @tatsumasu()
    def _pre_close_(self):  # noqa
        self._token('</pre>')

    @tatsumasu()
    def _tr_(self):  # noqa
        self._token('<tr>')

    @tatsumasu()
    def _tr_close_(self):  # noqa
        self._token('</tr>')

    @tatsumasu()
    def _td_(self):  # noqa
        self._token('<td valign="top">')

    @tatsumasu()
    def _td_close_(self):  # noqa
        self._token('</td>')

    @tatsumasu()
    def _p_(self):  # noqa
        self._token('<p class="bnorm">')

    @tatsumasu()
    def _p_norm_(self):  # noqa
        self._token('<p class="norm">')

    @tatsumasu()
    def _p_close_(self):  # noqa
        self._token('</p>')

    @tatsumasu()
    def _table_(self):  # noqa
        self._pattern('<table[^>]*>')

    @tatsumasu()
    def _table_close_(self):  # noqa
        self._token('</table>')

    @tatsumasu()
    def _anything_but_font_close_(self):  # noqa
        self._pattern('.*(?=<\\/font>)')

    @tatsumasu()
    def _font_size_2_(self):  # noqa
        self._token('<font size="2">')

    @tatsumasu()
    def _font_white_(self):  # noqa
        self._token('<font color="#000000">')

    @tatsumasu()
    def _font_red_(self):  # noqa
        self._token('<font color="#FF0000">')

    @tatsumasu()
    def _font_close_(self):  # noqa
        self._token('</font>')

    @tatsumasu()
    def _short_name_(self):  # noqa
        self._pattern("[A-Z]\\.[A-Za-z\\*\\-\\'\\s]+")

    @tatsumasu()
    def _short_name_no_pos_(self):  # noqa
        self._pattern("[A-Z]\\.[A-Za-z\\s\\*\\-\\']+[A-Za-z](?= (1B|1|2B|2|3B|3|SS|S|LF|L|CF|C|RF|R|PR|DH|D|PH|P))")

    @tatsumasu()
    def _short_name_no_result_(self):  # noqa
        self._pattern("[A-Z]\\.[A-Za-z\\s\\*\\-\\']+(?= (WIN|W|LOSS|L|HOLD|H|SAVE|S|BS|B|[0-9]))")

    @tatsumasu()
    def _last_name_(self):  # noqa
        self._pattern("[A-Za-z\\-\\'\\s\\*]+")

    @tatsumasu()
    def _last_name_no_in_(self):  # noqa
        self._pattern("[A-Za-z\\-\\'\\s\\*]+(?= In)")

    @tatsumasu()
    def _full_name_(self):  # noqa
        self._pattern("[A-Za-z\\.\\-\\'\\s\\*]+")

    @tatsumasu()
    def _full_name_no_injured_(self):  # noqa
        self._pattern("[A-Za-z\\.\\s\\-\\'\\*]+(?= INJURED)")

    @tatsumasu()
    def _full_name_no_gem_event_(self):  # noqa
        self._pattern("[A-Za-z\\.\\s\\-\\'\\*]+(?= (robbed|blocked|turns))")

    @tatsumasu()
    def _full_name_no_of_(self):  # noqa
        self._pattern("[A-Za-z\\.\\s\\-\\'\\*]+(?= of)")

    @tatsumasu()
    def _nickname_no_sep_(self):  # noqa
        self._pattern("[A-Za-z0-9\\'\\s]+(?=(\\:|\\.|\\s+AB|\\s+IP|\\())")

    @tatsumasu()
    def _ws_(self):  # noqa
        self._pattern('\\s+')

    @tatsumasu()
    def _phrase_(self):  # noqa
        self._pattern("[A-Za-z0-9\\'\\s\\.\\/]*")

    @tatsumasu()
    def _position_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('1B')
            with self._option():
                self._token('1')
            with self._option():
                self._token('2B')
            with self._option():
                self._token('2')
            with self._option():
                self._token('3B')
            with self._option():
                self._token('3')
            with self._option():
                self._token('SS')
            with self._option():
                self._token('S')
            with self._option():
                self._token('LF')
            with self._option():
                self._token('L')
            with self._option():
                self._token('CF')
            with self._option():
                self._token('C')
            with self._option():
                self._token('RF')
            with self._option():
                self._token('R')
            with self._option():
                self._token('PR')
            with self._option():
                self._token('DH')
            with self._option():
                self._token('D')
            with self._option():
                self._token('PH')
            with self._option():
                self._token('P')
            self._error('no available options')

    @tatsumasu()
    def _parenthesized_position_(self):  # noqa
        self._token('(')
        self._position_()
        self.name_last_node('@')
        self._token(')')

    @tatsumasu()
    def _year_(self):  # noqa
        self._pattern('[0-9]{4}')

    @tatsumasu()
    def _mdy_(self):  # noqa
        self._pattern('[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}')

    @tatsumasu()
    def _dash_(self):  # noqa
        self._token('-')

    @tatsumasu()
    def _decimal_number_(self):  # noqa
        self._pattern('[0-9]?\\.?[0-9]+')

    @tatsumasu()
    def _not_a_number_(self):  # noqa
        self._token('----')

    @tatsumasu()
    def _partial_inning_number_(self):  # noqa
        self._pattern('([12]{1}\\/3){0,1}')

    @tatsumasu()
    def _whole_number_(self):  # noqa
        self._pattern('[0-9]+')

    @tatsumasu()
    def _whole_number_comma_(self):  # noqa
        self._pattern('[0-9,]+')

    @tatsumasu()
    def _optionaless_(self):  # noqa
        self._pattern('s?')

    @tatsumasu()
    def _whitespace_(self):  # noqa
        self._pattern('\\s+')

    @tatsumasu()
    def _weekday_long_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('Sunday')
            with self._option():
                self._token('Monday')
            with self._option():
                self._token('Tuesday')
            with self._option():
                self._token('Wednesday')
            with self._option():
                self._token('Thursday')
            with self._option():
                self._token('Friday')
            with self._option():
                self._token('Saturday')
            self._error('no available options')

    @tatsumasu()
    def _month_long_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('January')
            with self._option():
                self._token('February')
            with self._option():
                self._token('March')
            with self._option():
                self._token('April')
            with self._option():
                self._token('May')
            with self._option():
                self._token('June')
            with self._option():
                self._token('July')
            with self._option():
                self._token('August')
            with self._option():
                self._token('September')
            with self._option():
                self._token('October')
            with self._option():
                self._token('November')
            with self._option():
                self._token('December')
            self._error('no available options')

    @tatsumasu()
    def _duration_(self):  # noqa
        self._whole_number_()
        self.name_last_node('hours')
        self._token(':')
        self._whole_number_()
        self.name_last_node('minutes')
        self.ast._define(
            ['hours', 'minutes'],
            []
        )

    @tatsumasu()
    def _day_night_time_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('Day')
            with self._option():
                self._token('Night')
            self._error('no available options')

    @tatsumasu()
    def _weather_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('Good')
            with self._option():
                self._token('Average')
            with self._option():
                self._token('Bad')
            self._error('no available options')

    @tatsumasu()
    def _long_date_(self):  # noqa
        self._weekday_long_()
        self.name_last_node('weekday')
        self._token(',')
        self._month_long_()
        self.name_last_node('month')
        self._whole_ordinal_()
        self.name_last_node('day')
        self._whole_number_()
        self.name_last_node('year')
        self.ast._define(
            ['day', 'month', 'weekday', 'year'],
            []
        )

    @tatsumasu()
    def _whole_ordinal_(self):  # noqa
        self._whole_number_()
        self.name_last_node('@')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('st')
                with self._option():
                    self._token('nd')
                with self._option():
                    self._token('rd')
                with self._option():
                    self._token('th')
                self._error('no available options')

    @tatsumasu()
    def _innings_pitched_number_(self):  # noqa
        self._whole_number_()
        self.name_last_node('whole')
        with self._optional():
            self._partial_inning_number_()
            self.name_last_node('part')
        self.ast._define(
            ['part', 'whole'],
            []
        )

    @tatsumasu()
    def _half_inning_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('Top')
                with self._option():
                    self._token('Bot')
                self._error('no available options')
        self.name_last_node('half')
        self._whole_ordinal_()
        self.name_last_node('number')
        self.ast._define(
            ['half', 'number'],
            []
        )

    @tatsumasu()
    def _parenthesized_whole_ordinal_(self):  # noqa
        self._token('(')
        self._whole_ordinal_()
        self.name_last_node('@')
        with self._optional():
            self._token(')')

    @tatsumasu()
    def _boxscore_td_start_(self):  # noqa
        self._token('<td valign="top">')

    @tatsumasu()
    def _boxscore_p_start_(self):  # noqa
        self._token('<p class="bnorm">')

    @tatsumasu()
    def _boxscore_spacer_(self):  # noqa
        self._token('<font color="#000000">')

        self._pattern('\\s*')
        self._token('</font>')

    @tatsumasu()
    def _boxscore_header_(self):  # noqa
        self._boxscore_td_start_()
        self._pre_()
        self._boxscore_p_start_()

    @tatsumasu()
    def _boxscore_matchup_(self):  # noqa
        with self._optional():
            self._token('BOXSCORE:')
        self._phrase_()
        self.name_last_node('phrase')
        self.ast._define(
            ['phrase'],
            []
        )

    @tatsumasu()
    def _boxscore_matchup_header_(self):  # noqa
        self._token('<font color="#FF0000">')

        self._boxscore_matchup_()
        self.name_last_node('@')
        self._token('</font>')

    @tatsumasu()
    def _boxscore_hitting_stat_label_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('AB')
            with self._option():
                self._token('R')
            with self._option():
                self._token('H')
            with self._option():
                self._token('RBI')
            with self._option():
                self._token('AVG')
            self._error('no available options')

    @tatsumasu()
    def _boxscore_hitting_header_(self):  # noqa
        self._token('<font color="#FF0000">')

        self._phrase_()
        self.name_last_node('phrase')
        self._token('</font>')
        self.ast._define(
            ['phrase'],
            []
        )

    @tatsumasu()
    def _boxscore_hitting_sub_annotation_(self):  # noqa
        self._pattern('[A-Z]?')

    @tatsumasu()
    def _boxscore_hitting_substitution_(self):  # noqa
        self._boxscore_hitting_sub_annotation_()
        self.name_last_node('@')
        self._token('-')

    @tatsumasu()
    def _boxscore_hitting_position_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._position_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _boxscore_hitting_stat_line_(self):  # noqa

        def block1():
            self._boxscore_hitting_substitution_()
        self._closure(block1)
        self.name_last_node('substitution')
        self._short_name_no_pos_()
        self.name_last_node('player_name')
        self._boxscore_hitting_position_()
        self.name_last_node('positions')

        def block5():
            with self._group():
                with self._choice():
                    with self._option():
                        self._decimal_number_()
                    with self._option():
                        self._not_a_number_()
                    self._error('no available options')
        self._closure(block5)
        self.name_last_node('statistics')
        self.ast._define(
            ['player_name', 'positions', 'statistics', 'substitution'],
            []
        )

    @tatsumasu()
    def _boxscore_hitting_player_line_(self):  # noqa
        self._token('<font color="#000000">')


        def block1():
            self._boxscore_hitting_stat_line_()
        self._closure(block1)
        self.name_last_node('players')
        self._token('</font>')
        self.ast._define(
            ['players'],
            []
        )

    @tatsumasu()
    def _dashes_(self):  # noqa
        self._pattern('[\\-]{2,3}')

    @tatsumasu()
    def _boxscore_hitting_separator_(self):  # noqa
        self._token('<font color="#000000">')

        self._pattern('[\\-\\s]*')
        self._token('</font>')

    @tatsumasu()
    def _boxscore_hitting_total_line_(self):  # noqa
        self._token('Totals')

        def block1():
            self._whole_number_()
        self._closure(block1)
        self.name_last_node('totals')
        self.ast._define(
            ['totals'],
            []
        )

    @tatsumasu()
    def _boxscore_hitting_totals_(self):  # noqa
        self._token('<font color="#FF0000">')


        def block1():
            self._boxscore_hitting_total_line_()
        self._closure(block1)
        self.name_last_node('@')
        self._token('</font>')

    @tatsumasu()
    def _boxscore_hitting_(self):  # noqa
        self._boxscore_hitting_header_()
        self.name_last_node('header')

        def block2():
            self._boxscore_hitting_player_line_()
        self._closure(block2)
        self.name_last_node('player_stats')
        self._boxscore_hitting_separator_()
        self._boxscore_hitting_totals_()
        self.name_last_node('team_stats')
        self.ast._define(
            ['header', 'player_stats', 'team_stats'],
            []
        )

    @tatsumasu()
    def _boxscore_run_substitution_(self):  # noqa
        self._token('<font color="#000000">')

        with self._optional():
            self._boxscore_hitting_substitution_()
        self.name_last_node('substitution')
        self._token('Pinch')
        self._token('Ran')
        self.name_last_node('type')
        self._token('For')
        self._last_name_no_in_()
        self.name_last_node('player')
        self._token('In')
        self._whole_ordinal_()
        self.name_last_node('inning')
        self._token('Inning')
        self._token('</font>')
        self.ast._define(
            ['inning', 'player', 'substitution', 'type'],
            []
        )

    @tatsumasu()
    def _boxscore_hit_substitution_(self):  # noqa
        self._token('<font color="#000000">')

        with self._optional():
            self._boxscore_hitting_substitution_()
        self.name_last_node('substitution')
        self._token('Pinch')
        self._token('Hit')
        self.name_last_node('type')
        self._token('For')
        self._last_name_no_in_()
        self.name_last_node('player')
        self._token('In')
        self._whole_ordinal_()
        self.name_last_node('inning')
        self._token('Inning')
        self._token('</font>')
        self.ast._define(
            ['inning', 'player', 'substitution', 'type'],
            []
        )

    @tatsumasu()
    def _boxscore_defensive_substitution_(self):  # noqa
        self._token('<font color="#000000">')

        with self._optional():
            self._boxscore_hitting_substitution_()
        self.name_last_node('substitution')
        self._token('Subbed')
        self._token('Defensively')
        self.name_last_node('type')
        self._parenthesized_position_()
        self.name_last_node('position')
        self._token('For')
        self._last_name_no_in_()
        self.name_last_node('player')
        self._token('In')
        self._whole_ordinal_()
        self.name_last_node('inning')
        self._token('Inning')
        self._token('</font>')
        self.ast._define(
            ['inning', 'player', 'position', 'substitution', 'type'],
            []
        )

    @tatsumasu()
    def _boxscore_dh_substitution_(self):  # noqa
        self._token('<font color="#000000">')

        with self._optional():
            self._boxscore_hitting_substitution_()
        self.name_last_node('substitution')
        self._token('Subbed')
        self._parenthesized_position_()
        self.name_last_node('position')
        self._token('For')
        self._last_name_no_in_()
        self.name_last_node('player')
        self._token('In')
        self._whole_ordinal_()
        self.name_last_node('inning')
        self._token('Inning')
        self._token('</font>')
        self.ast._define(
            ['inning', 'player', 'position', 'substitution'],
            []
        )

    @tatsumasu()
    def _boxscore_substitution_(self):  # noqa
        with self._choice():
            with self._option():
                self._boxscore_run_substitution_()
            with self._option():
                self._boxscore_hit_substitution_()
            with self._option():
                self._boxscore_defensive_substitution_()
            with self._option():
                self._boxscore_dh_substitution_()
            self._error('no available options')

    @tatsumasu()
    def _boxscore_injury_duration_(self):  # noqa
        self._token('(for ')
        self._whole_number_()
        self.name_last_node('@')
        self._token('more')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('game)')
                with self._option():
                    self._token('games)')
                self._error('no available options')

    @tatsumasu()
    def _boxscore_injury_(self):  # noqa
        self._token('<font color="#000000">')

        self._token('INJURY:')
        self._full_name_no_injured_()
        self.name_last_node('name')
        self._token('INJURED')
        self._boxscore_injury_duration_()
        self.name_last_node('duration')
        self._token('in')
        self._whole_ordinal_()
        self.name_last_node('inning')
        self._token('inning')
        self._token('</font>')
        self.ast._define(
            ['duration', 'inning', 'name'],
            []
        )

    @tatsumasu()
    def _boxscore_team_inning_runs_(self):  # noqa
        self._pattern('[0-9]+')

    @tatsumasu()
    def _boxscore_team_totals_(self):  # noqa
        self._whole_number_()
        self.name_last_node('runs')
        self._whole_number_()
        self.name_last_node('hits')
        self._whole_number_()
        self.name_last_node('errors')
        self.ast._define(
            ['errors', 'hits', 'runs'],
            []
        )

    @tatsumasu()
    def _boxscore_team_(self):  # noqa
        self._token('<font color="#000000">')

        self._nickname_no_sep_()
        self.name_last_node('nickname')
        self._pattern('\\.*')

        def block2():
            self._boxscore_team_inning_runs_()
        self._closure(block2)
        self.name_last_node('runs')
        self._token('-')
        self._boxscore_team_totals_()
        self.name_last_node('totals')
        self._token('</font>')
        self.ast._define(
            ['nickname', 'runs', 'totals'],
            []
        )

    @tatsumasu()
    def _boxscore_pitching_stat_label_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('IP')
            with self._option():
                self._token('H')
            with self._option():
                self._token('R')
            with self._option():
                self._token('ER')
            with self._option():
                self._token('BB')
            with self._option():
                self._token('SO')
            with self._option():
                self._token('HR')
            with self._option():
                self._token('PC')
            with self._option():
                self._token('ERA')
            with self._option():
                self._token('SCORESHEET')
            self._error('no available options')

    @tatsumasu()
    def _record_(self):  # noqa
        self._whole_number_()
        self.name_last_node('wins')
        self._token('-')
        self._whole_number_()
        self.name_last_node('losses')
        self.ast._define(
            ['losses', 'wins'],
            []
        )

    @tatsumasu()
    def _parenthesized_record_(self):  # noqa
        self._token('(')
        self._record_()
        self.name_last_node('@')
        with self._optional():
            self._token(')')

    @tatsumasu()
    def _boxscore_pitching_header_team_(self):  # noqa
        self._token('<font color="#FF0000">')

        self._nickname_no_sep_()
        self.name_last_node('nickname')
        with self._optional():
            self._parenthesized_record_()
            self.name_last_node('record')

        def block3():
            self._boxscore_pitching_stat_label_()
        self._closure(block3)
        self.name_last_node('headers')
        self._token('</font>')
        self.ast._define(
            ['headers', 'nickname', 'record'],
            []
        )

    @tatsumasu()
    def _boxscore_pitching_result_win_(self):  # noqa
        self._token('WIN')
        self.name_last_node('@')
        with self._optional():
            self._parenthesized_record_()

    @tatsumasu()
    def _boxscore_pitching_result_win_abv_(self):  # noqa
        self._token('W')
        self.name_last_node('@')
        self._parenthesized_record_()

    @tatsumasu()
    def _boxscore_pitching_result_loss_(self):  # noqa
        self._token('LOSS')
        self.name_last_node('@')
        with self._optional():
            self._parenthesized_record_()

    @tatsumasu()
    def _boxscore_pitching_result_loss_abv_(self):  # noqa
        self._token('L')
        self.name_last_node('@')
        self._parenthesized_record_()

    @tatsumasu()
    def _boxscore_pitching_result_hold_(self):  # noqa
        self._token('HOLD')
        self.name_last_node('@')
        self._parenthesized_whole_ordinal_()

    @tatsumasu()
    def _boxscore_pitching_result_hold_abv_(self):  # noqa
        self._token('H')
        self.name_last_node('@')
        self._parenthesized_whole_ordinal_()

    @tatsumasu()
    def _boxscore_pitching_result_save_(self):  # noqa
        self._token('SAVE')
        self.name_last_node('@')
        self._parenthesized_whole_ordinal_()

    @tatsumasu()
    def _boxscore_pitching_result_save_abv_(self):  # noqa
        self._token('S')
        self.name_last_node('@')
        self._parenthesized_whole_ordinal_()

    @tatsumasu()
    def _boxscore_pitching_result_blown_save_(self):  # noqa
        self._token('BS')
        self.name_last_node('@')
        self._parenthesized_whole_ordinal_()

    @tatsumasu()
    def _boxscore_pitching_result_blown_save_abv_(self):  # noqa
        self._token('B')
        self.name_last_node('@')
        self._parenthesized_whole_ordinal_()

    @tatsumasu()
    def _boxscore_pitching_result_stat_(self):  # noqa
        with self._choice():
            with self._option():
                self._boxscore_pitching_result_loss_()
            with self._option():
                self._boxscore_pitching_result_win_()
            with self._option():
                self._boxscore_pitching_result_win_abv_()
            with self._option():
                self._boxscore_pitching_result_loss_abv_()
            with self._option():
                self._boxscore_pitching_result_hold_()
            with self._option():
                self._boxscore_pitching_result_hold_abv_()
            with self._option():
                self._boxscore_pitching_result_save_()
            with self._option():
                self._boxscore_pitching_result_save_abv_()
            with self._option():
                self._boxscore_pitching_result_blown_save_()
            with self._option():
                self._boxscore_pitching_result_blown_save_abv_()
            self._error('no available options')

    @tatsumasu()
    def _boxscore_pitching_stat_line_(self):  # noqa
        self._token('<font color="#000000">')

        self._short_name_no_result_()
        self.name_last_node('player_name')

        def block2():
            self._boxscore_pitching_result_stat_()
        self._closure(block2)
        self.name_last_node('result_stats')
        self._innings_pitched_number_()
        self.name_last_node('ip')

        def block5():
            with self._group():
                with self._choice():
                    with self._option():
                        self._decimal_number_()
                    with self._option():
                        self._not_a_number_()
                    self._error('no available options')
        self._closure(block5)
        self.name_last_node('statistics')
        with self._optional():

            def block8():
                self._scoresheet_index_()
            self._closure(block8)
            self.name_last_node('scoresheet')
        self._token('</font>')
        self.ast._define(
            ['ip', 'player_name', 'result_stats', 'scoresheet', 'statistics'],
            []
        )

    @tatsumasu()
    def _scoresheet_index_(self):  # noqa
        self._pattern('[A-Z]{1}[0-9]+')

    @tatsumasu()
    def _boxscore_pitching_total_line_(self):  # noqa
        self._token('<font color="#FF0000">')

        self._token('Totals')
        self._innings_pitched_number_()
        self.name_last_node('ip')

        def block2():
            self._decimal_number_()
        self._closure(block2)
        self.name_last_node('statistics')
        self._token('</font>')
        self.ast._define(
            ['ip', 'statistics'],
            []
        )

    @tatsumasu()
    def _boxscore_pitching_team_(self):  # noqa
        self._boxscore_pitching_header_team_()
        self.name_last_node('header')

        def block2():
            self._boxscore_pitching_stat_line_()
        self._closure(block2)
        self.name_last_node('pitchers')
        self._boxscore_pitching_total_line_()
        self.name_last_node('totals')
        self.ast._define(
            ['header', 'pitchers', 'totals'],
            []
        )

    @tatsumasu()
    def _boxscore_pitching_(self):  # noqa
        self._boxscore_pitching_team_()
        self.name_last_node('away')
        self._boxscore_spacer_()
        self._boxscore_pitching_team_()
        self.name_last_node('home')
        self.ast._define(
            ['away', 'home'],
            []
        )

    @tatsumasu()
    def _attendance_data_(self):  # noqa
        self._token('ATTENDANCE-')
        self._whole_number_comma_()
        self.name_last_node('@')

    @tatsumasu()
    def _long_date_data_(self):  # noqa
        self._token('DATE-')
        self._long_date_()
        self.name_last_node('@')

    @tatsumasu()
    def _time_data_(self):  # noqa
        self._token('TIME-')
        self._day_night_time_()
        self.name_last_node('@')

    @tatsumasu()
    def _weather_data_(self):  # noqa
        self._token('WEATHER-')
        self._weather_()
        self.name_last_node('@')

    @tatsumasu()
    def _duration_data_(self):  # noqa
        self._token('T-')
        self._duration_()
        self.name_last_node('@')

    @tatsumasu()
    def _umpire_name_(self):  # noqa
        self._full_name_()
        self.name_last_node('@')
        with self._optional():
            self._token(',')

    @tatsumasu()
    def _umpire_data_(self):  # noqa
        self._token('<font color="#000000">')

        self._token('UMPIRES-')

        def block1():
            self._umpire_name_()
        self._closure(block1)
        self.name_last_node('@')
        self._token('</font>')

    @tatsumasu()
    def _peripheral_game_data_(self):  # noqa
        self._token('<font color="#000000">')

        self._attendance_data_()
        self.name_last_node('attendance')
        with self._optional():
            self._long_date_data_()
            self.name_last_node('date')
        self._time_data_()
        self.name_last_node('time')
        self._weather_data_()
        self.name_last_node('weather')
        self._token('</font>')

        with self._optional():
            self._umpire_data_()
            self.name_last_node('umpires')
        self._token('<font color="#000000">')

        self._duration_data_()
        self.name_last_node('duration')
        self._token('</font>')
        self.ast._define(
            ['attendance', 'date', 'duration', 'time', 'umpires', 'weather'],
            []
        )

    @tatsumasu()
    def _boxscore_team_count_colon_(self):  # noqa
        self._nickname_no_sep_()
        self.name_last_node('nickname')
        self._token(':')
        self._whole_number_()
        self.name_last_node('count')
        self.ast._define(
            ['count', 'nickname'],
            []
        )

    @tatsumasu()
    def _boxscore_team_basic_rate_(self):  # noqa
        self._nickname_no_sep_()
        self.name_last_node('nickname')
        self._token(':')
        self._whole_number_()
        self.name_last_node('count')
        self._token('for')
        self._whole_number_()
        self.name_last_node('opportunities')
        self.ast._define(
            ['count', 'nickname', 'opportunities'],
            []
        )

    @tatsumasu()
    def _boxscore_team_statistic_details_name_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('LEFT ON BASE')
            with self._option():
                self._token('DOUBLE PLAYS')
            with self._option():
                self._token('TRIPLE PLAYS')
            self._error('no available options')

    @tatsumasu()
    def _boxscore_team_statistic_details_(self):  # noqa
        self._token('<font color="#000000">')

        self._boxscore_team_statistic_details_name_()
        self.name_last_node('name')
        self._token('-')
        self._boxscore_team_count_colon_()
        self.name_last_node('away')
        self._boxscore_team_count_colon_()
        self.name_last_node('home')
        self._token('</font>')
        self.ast._define(
            ['away', 'home', 'name'],
            []
        )

    @tatsumasu()
    def _boxscore_player_statistic_detail_(self):  # noqa
        with self._optional():
            self._token('<font color="#000000">')
        self._short_name_()
        self.name_last_node('name')
        with self._optional():
            self._token('-')
        with self._optional():
            self._whole_number_()
            self.name_last_node('game_count')
        with self._optional():
            self._parenthesized_whole_ordinal_()
            self.name_last_node('season_count')
        with self._optional():
            self._token(',')
        with self._optional():
            self._token('</font>')
        self.ast._define(
            ['game_count', 'name', 'season_count'],
            []
        )

    @tatsumasu()
    def _boxscore_player_statistic_details_name_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('ERRORS')
            with self._option():
                self._token('DOUBLES')
            with self._option():
                self._token('TRIPLES')
            with self._option():
                self._token('HOME RUNS')
            with self._option():
                self._token('Homeruns')
            with self._option():
                self._token('SACRIFICE HITS')
            with self._option():
                self._token('SACRIFICE FLIES')
            with self._option():
                self._token('RBIs')
            with self._option():
                self._token('STOLEN BASES')
            with self._option():
                self._token('CAUGHT STEALING')
            with self._option():
                self._token('WALKS')
            with self._option():
                self._token('HIT BY PITCH')
            with self._option():
                self._token('STRIKE OUTS')
            with self._option():
                self._token('GIDP')
            with self._option():
                self._token('CATCHERS INTERFERENCE')
            with self._option():
                self._token('PASSED BALLS')
            with self._option():
                self._token('BALKS')
            with self._option():
                self._token('WILD PITCHES')
            with self._option():
                self._token('2-out RBI')
            with self._option():
                self._token('RLISP 2-out')
            self._error('no available options')

    @tatsumasu()
    def _boxscore_statistic_details_(self):  # noqa
        self._token('<font color="#000000">')

        self._boxscore_player_statistic_details_name_()
        self.name_last_node('name')
        self._token('-')

        def block2():
            self._boxscore_player_statistic_detail_()
        self._closure(block2)
        self.name_last_node('data')
        with self._optional():
            self._token('</font>')
        self.ast._define(
            ['data', 'name'],
            []
        )

    @tatsumasu()
    def _boxscore_risp_details_(self):  # noqa
        self._token('<font color="#000000">')

        self._token('TEAM RISP')
        self._token('-')
        self._boxscore_team_basic_rate_()
        self.name_last_node('away')
        self._boxscore_team_basic_rate_()
        self.name_last_node('home')
        self._token('</font>')
        self.ast._define(
            ['away', 'home'],
            []
        )

    @tatsumasu()
    def _gem_event_(self):  # noqa
        self._pattern('[A-Za-z\\s]+')

    @tatsumasu()
    def _gem_details_(self):  # noqa
        self._full_name_no_gem_event_()
        self.name_last_node('gemmer')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('robbed')
                with self._option():
                    self._token('blocked the plate')
                with self._option():
                    self._token('turns')
                self._error('no available options')
        self.name_last_node('action')
        with self._optional():
            self._token(',')
        with self._optional():
            self._full_name_no_of_()
            self.name_last_node('gemmee')
        with self._optional():
            self._token('of a')
        with self._optional():
            self._token('n')
        self._gem_event_()
        self.name_last_node('event')
        self.ast._define(
            ['action', 'event', 'gemmee', 'gemmer'],
            []
        )

    @tatsumasu()
    def _boxscore_web_gem_(self):  # noqa
        with self._optional():
            self._token('<font color="#000000">')
        self._half_inning_()
        self.name_last_node('inning')
        self._token(':')
        self._gem_details_()
        self.name_last_node('gem_details')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('.')
                with self._option():
                    self._token('!')
                self._error('no available options')
        with self._optional():
            self._token('</font>')
        self.ast._define(
            ['gem_details', 'inning'],
            []
        )

    @tatsumasu()
    def _boxscore_web_gems_(self):  # noqa
        self._token('<font color="#000000">')

        self._token('WEB GEMS')
        self._token('-')

        def block1():
            self._boxscore_web_gem_()
        self._closure(block1)
        self.name_last_node('@')
        with self._optional():
            self._token('</font>')

    @tatsumasu()
    def _boxscore_(self):  # noqa
        self._boxscore_matchup_header_()
        self.name_last_node('matchup')
        self._boxscore_spacer_()
        self._boxscore_hitting_()
        self.name_last_node('hitting_boxscore')
        self._boxscore_spacer_()

        def block3():
            self._boxscore_substitution_()
        self._closure(block3)
        self.name_last_node('substitutions')
        with self._optional():
            self._boxscore_spacer_()

        def block5():
            self._boxscore_injury_()
        self._closure(block5)
        self.name_last_node('injuries')
        with self._optional():
            self._boxscore_spacer_()

        def block7():
            self._boxscore_team_()
        self._closure(block7)
        self.name_last_node('team_boxscore')
        self._boxscore_spacer_()

        def block9():
            self._boxscore_pitching_()
        self._closure(block9)
        self.name_last_node('pitching_boxscore')
        self._boxscore_spacer_()
        self._peripheral_game_data_()
        self.name_last_node('peripheral_game_data')

        def block12():
            self._boxscore_team_statistic_details_()
        self._closure(block12)
        self.name_last_node('team_statistics_details')

        def block14():
            self._boxscore_statistic_details_()
        self._closure(block14)
        self.name_last_node('player_statistics_details')
        with self._optional():
            self._boxscore_risp_details_()
            self.name_last_node('team_risp_details')
        with self._optional():
            self._boxscore_web_gems_()
            self.name_last_node('web_gems')
        self.ast._define(
            ['hitting_boxscore', 'injuries', 'matchup', 'peripheral_game_data', 'pitching_boxscore', 'player_statistics_details', 'substitutions', 'team_boxscore', 'team_risp_details', 'team_statistics_details', 'web_gems'],
            []
        )

    @tatsumasu()
    def _boxscore_data_(self):  # noqa
        self._td_()
        self._pre_()
        self._p_()
        self._boxscore_()
        self.name_last_node('@')
        self._p_close_()
        self._pre_close_()
        self._td_close_()

    @tatsumasu()
    def _boxscore_row_(self):  # noqa
        self._tr_()

        def block1():
            self._boxscore_data_()
        self._closure(block1)
        self.name_last_node('@')
        self._tr_close_()

    @tatsumasu()
    def _page_break_(self):  # noqa
        self._token("<p style='page-break-before:always' ></p>")

    @tatsumasu()
    def _boxscore_table_(self):  # noqa
        self._table_()

        def block1():
            self._boxscore_row_()
        self._closure(block1)
        self.name_last_node('@')
        self._table_close_()

    @tatsumasu()
    def _boxscore_all_(self):  # noqa
        self._page_break_()

        def block1():
            self._boxscore_table_()
        self._closure(block1)
        self.name_last_node('@')

    @tatsumasu()
    def _game_story_header_(self):  # noqa
        self._token('<font color="#FF0000">')

        self._phrase_()
        self.name_last_node('phrase')
        self._token('</font>')
        self.ast._define(
            ['phrase'],
            []
        )

    @tatsumasu()
    def _game_story_pitcher_decision_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('Win')
                with self._option():
                    self._token('Loss')
                self._error('no available options')
        self.name_last_node('type')
        self._token(':')
        self._last_name_()
        self.name_last_node('player')
        self._parenthesized_record_()
        self.name_last_node('record')
        self.ast._define(
            ['player', 'record', 'type'],
            []
        )

    @tatsumasu()
    def _game_story_pitcher_save_(self):  # noqa
        self._token('Save')
        self.name_last_node('type')
        self._token(':')
        self._last_name_()
        self.name_last_node('player')
        self._parenthesized_whole_ordinal_()
        self.name_last_node('season_count')
        self.ast._define(
            ['player', 'season_count', 'type'],
            []
        )

    @tatsumasu()
    def _game_story_pitcher_stats_(self):  # noqa
        self._token('<font color="#000000">')

        self._game_story_pitcher_decision_()
        self.name_last_node('winning_pitcher')
        self._game_story_pitcher_decision_()
        self.name_last_node('losing_pitcher')
        with self._optional():
            self._game_story_pitcher_save_()
            self.name_last_node('save_pitcher')
        self._token('</font>')
        self.ast._define(
            ['losing_pitcher', 'save_pitcher', 'winning_pitcher'],
            []
        )

    @tatsumasu()
    def _text_no_close_font_(self):  # noqa
        self._pattern("[A-Za-z0-9'\\s\\(\\)\\!\\?\\.\\,\\/\\-\\;\\*]*(?=<\\/font>)")

    @tatsumasu()
    def _game_story_recap_line_(self):  # noqa
        self._token('<font color="#000000">')

        self._text_no_close_font_()
        self.name_last_node('@')
        self._token('</font>')

    @tatsumasu()
    def _game_story_recap_(self):  # noqa

        def block1():
            self._game_story_recap_line_()
        self._closure(block1)
        self.name_last_node('@')

    @tatsumasu()
    def _game_story_(self):  # noqa
        with self._optional():
            self._boxscore_spacer_()
        self._game_story_header_()
        self.name_last_node('matchup')
        self._boxscore_team_()
        self.name_last_node('away')
        self._boxscore_team_()
        self.name_last_node('home')
        self._game_story_pitcher_stats_()
        self.name_last_node('pitcher_stats')
        with self._optional():
            self._boxscore_statistic_details_()
            self.name_last_node('hitter_stats')
        self._boxscore_spacer_()
        self._game_story_recap_()
        self.name_last_node('recap')
        self.ast._define(
            ['away', 'hitter_stats', 'home', 'matchup', 'pitcher_stats', 'recap'],
            []
        )

    @tatsumasu()
    def _game_story_data_(self):  # noqa
        self._td_()
        self._pre_()
        self._p_norm_()

        def block1():
            self._game_story_()
        self._closure(block1)
        self.name_last_node('@')
        self._p_close_()
        self._pre_close_()
        self._td_close_()

    @tatsumasu()
    def _game_story_row_(self):  # noqa
        self._tr_()

        def block1():
            self._game_story_data_()
        self._closure(block1)
        self.name_last_node('@')
        self._tr_close_()

    @tatsumasu()
    def _game_story_table_(self):  # noqa
        self._table_()

        def block1():
            self._game_story_row_()
        self._closure(block1)
        self.name_last_node('@')
        self._table_close_()

    @tatsumasu()
    def _scoresheet_line_(self):  # noqa
        self._token('<font color="#000000">')

        self._anything_but_font_close_()
        self._token('</font>')

    @tatsumasu()
    def _scoresheet_matchup_header_(self):  # noqa
        self._token('<font color="#FF0000">')

        self._token('SCORESHEET:')
        self._boxscore_matchup_()
        self._token('</font>')

    @tatsumasu()
    def _scoresheet_(self):  # noqa
        self._scoresheet_matchup_header_()

        def block0():
            self._scoresheet_line_()
        self._closure(block0)
        with self._optional():
            self._token('</font>')

    @tatsumasu()
    def _full_recap_(self):  # noqa
        self._pre_()
        self._font_size_2_()

        def block1():
            self._boxscore_()
        self._closure(block1)
        self.name_last_node('boxscores')
        with self._optional():

            def block3():
                self._game_story_recap_()
            self._closure(block3)
            self.name_last_node('game_stories')
        with self._optional():
            self._font_close_()
        with self._optional():
            self._scoresheet_()
        with self._optional():

            def block4():
                self._boxscore_spacer_()
            self._closure(block4)
        with self._optional():
            self._scoresheet_()
        self._pre_close_()
        self.ast._define(
            ['boxscores', 'game_stories'],
            []
        )


class GameReportSemantics(object):
    def pre(self, ast):  # noqa
        return ast

    def pre_close(self, ast):  # noqa
        return ast

    def tr(self, ast):  # noqa
        return ast

    def tr_close(self, ast):  # noqa
        return ast

    def td(self, ast):  # noqa
        return ast

    def td_close(self, ast):  # noqa
        return ast

    def p(self, ast):  # noqa
        return ast

    def p_norm(self, ast):  # noqa
        return ast

    def p_close(self, ast):  # noqa
        return ast

    def table(self, ast):  # noqa
        return ast

    def table_close(self, ast):  # noqa
        return ast

    def anything_but_font_close(self, ast):  # noqa
        return ast

    def font_size_2(self, ast):  # noqa
        return ast

    def font_white(self, ast):  # noqa
        return ast

    def font_red(self, ast):  # noqa
        return ast

    def font_close(self, ast):  # noqa
        return ast

    def short_name(self, ast):  # noqa
        return ast

    def short_name_no_pos(self, ast):  # noqa
        return ast

    def short_name_no_result(self, ast):  # noqa
        return ast

    def last_name(self, ast):  # noqa
        return ast

    def last_name_no_in(self, ast):  # noqa
        return ast

    def full_name(self, ast):  # noqa
        return ast

    def full_name_no_injured(self, ast):  # noqa
        return ast

    def full_name_no_gem_event(self, ast):  # noqa
        return ast

    def full_name_no_of(self, ast):  # noqa
        return ast

    def nickname_no_sep(self, ast):  # noqa
        return ast

    def ws(self, ast):  # noqa
        return ast

    def phrase(self, ast):  # noqa
        return ast

    def position(self, ast):  # noqa
        return ast

    def parenthesized_position(self, ast):  # noqa
        return ast

    def year(self, ast):  # noqa
        return ast

    def mdy(self, ast):  # noqa
        return ast

    def dash(self, ast):  # noqa
        return ast

    def decimal_number(self, ast):  # noqa
        return ast

    def not_a_number(self, ast):  # noqa
        return ast

    def partial_inning_number(self, ast):  # noqa
        return ast

    def whole_number(self, ast):  # noqa
        return ast

    def whole_number_comma(self, ast):  # noqa
        return ast

    def optionaless(self, ast):  # noqa
        return ast

    def whitespace(self, ast):  # noqa
        return ast

    def weekday_long(self, ast):  # noqa
        return ast

    def month_long(self, ast):  # noqa
        return ast

    def duration(self, ast):  # noqa
        return ast

    def day_night_time(self, ast):  # noqa
        return ast

    def weather(self, ast):  # noqa
        return ast

    def long_date(self, ast):  # noqa
        return ast

    def whole_ordinal(self, ast):  # noqa
        return ast

    def innings_pitched_number(self, ast):  # noqa
        return ast

    def half_inning(self, ast):  # noqa
        return ast

    def parenthesized_whole_ordinal(self, ast):  # noqa
        return ast

    def boxscore_td_start(self, ast):  # noqa
        return ast

    def boxscore_p_start(self, ast):  # noqa
        return ast

    def boxscore_spacer(self, ast):  # noqa
        return ast

    def boxscore_header(self, ast):  # noqa
        return ast

    def boxscore_matchup(self, ast):  # noqa
        return ast

    def boxscore_matchup_header(self, ast):  # noqa
        return ast

    def boxscore_hitting_stat_label(self, ast):  # noqa
        return ast

    def boxscore_hitting_header(self, ast):  # noqa
        return ast

    def boxscore_hitting_sub_annotation(self, ast):  # noqa
        return ast

    def boxscore_hitting_substitution(self, ast):  # noqa
        return ast

    def boxscore_hitting_position(self, ast):  # noqa
        return ast

    def boxscore_hitting_stat_line(self, ast):  # noqa
        return ast

    def boxscore_hitting_player_line(self, ast):  # noqa
        return ast

    def dashes(self, ast):  # noqa
        return ast

    def boxscore_hitting_separator(self, ast):  # noqa
        return ast

    def boxscore_hitting_total_line(self, ast):  # noqa
        return ast

    def boxscore_hitting_totals(self, ast):  # noqa
        return ast

    def boxscore_hitting(self, ast):  # noqa
        return ast

    def boxscore_run_substitution(self, ast):  # noqa
        return ast

    def boxscore_hit_substitution(self, ast):  # noqa
        return ast

    def boxscore_defensive_substitution(self, ast):  # noqa
        return ast

    def boxscore_dh_substitution(self, ast):  # noqa
        return ast

    def boxscore_substitution(self, ast):  # noqa
        return ast

    def boxscore_injury_duration(self, ast):  # noqa
        return ast

    def boxscore_injury(self, ast):  # noqa
        return ast

    def boxscore_team_inning_runs(self, ast):  # noqa
        return ast

    def boxscore_team_totals(self, ast):  # noqa
        return ast

    def boxscore_team(self, ast):  # noqa
        return ast

    def boxscore_pitching_stat_label(self, ast):  # noqa
        return ast

    def record(self, ast):  # noqa
        return ast

    def parenthesized_record(self, ast):  # noqa
        return ast

    def boxscore_pitching_header_team(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_win(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_win_abv(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_loss(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_loss_abv(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_hold(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_hold_abv(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_save(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_save_abv(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_blown_save(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_blown_save_abv(self, ast):  # noqa
        return ast

    def boxscore_pitching_result_stat(self, ast):  # noqa
        return ast

    def boxscore_pitching_stat_line(self, ast):  # noqa
        return ast

    def scoresheet_index(self, ast):  # noqa
        return ast

    def boxscore_pitching_total_line(self, ast):  # noqa
        return ast

    def boxscore_pitching_team(self, ast):  # noqa
        return ast

    def boxscore_pitching(self, ast):  # noqa
        return ast

    def attendance_data(self, ast):  # noqa
        return ast

    def long_date_data(self, ast):  # noqa
        return ast

    def time_data(self, ast):  # noqa
        return ast

    def weather_data(self, ast):  # noqa
        return ast

    def duration_data(self, ast):  # noqa
        return ast

    def umpire_name(self, ast):  # noqa
        return ast

    def umpire_data(self, ast):  # noqa
        return ast

    def peripheral_game_data(self, ast):  # noqa
        return ast

    def boxscore_team_count_colon(self, ast):  # noqa
        return ast

    def boxscore_team_basic_rate(self, ast):  # noqa
        return ast

    def boxscore_team_statistic_details_name(self, ast):  # noqa
        return ast

    def boxscore_team_statistic_details(self, ast):  # noqa
        return ast

    def boxscore_player_statistic_detail(self, ast):  # noqa
        return ast

    def boxscore_player_statistic_details_name(self, ast):  # noqa
        return ast

    def boxscore_statistic_details(self, ast):  # noqa
        return ast

    def boxscore_risp_details(self, ast):  # noqa
        return ast

    def gem_event(self, ast):  # noqa
        return ast

    def gem_details(self, ast):  # noqa
        return ast

    def boxscore_web_gem(self, ast):  # noqa
        return ast

    def boxscore_web_gems(self, ast):  # noqa
        return ast

    def boxscore(self, ast):  # noqa
        return ast

    def boxscore_data(self, ast):  # noqa
        return ast

    def boxscore_row(self, ast):  # noqa
        return ast

    def page_break(self, ast):  # noqa
        return ast

    def boxscore_table(self, ast):  # noqa
        return ast

    def boxscore_all(self, ast):  # noqa
        return ast

    def game_story_header(self, ast):  # noqa
        return ast

    def game_story_pitcher_decision(self, ast):  # noqa
        return ast

    def game_story_pitcher_save(self, ast):  # noqa
        return ast

    def game_story_pitcher_stats(self, ast):  # noqa
        return ast

    def text_no_close_font(self, ast):  # noqa
        return ast

    def game_story_recap_line(self, ast):  # noqa
        return ast

    def game_story_recap(self, ast):  # noqa
        return ast

    def game_story(self, ast):  # noqa
        return ast

    def game_story_data(self, ast):  # noqa
        return ast

    def game_story_row(self, ast):  # noqa
        return ast

    def game_story_table(self, ast):  # noqa
        return ast

    def scoresheet_line(self, ast):  # noqa
        return ast

    def scoresheet_matchup_header(self, ast):  # noqa
        return ast

    def scoresheet(self, ast):  # noqa
        return ast

    def full_recap(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'pre'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = GameReportParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, GameReportParser, name='GameReport')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()

