#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS


__version__ = (2015, 8, 29, 22, 15, 33, 5)

__all__ = [
    'GameReportParser',
    'GameReportSemantics',
    'main'
]


class GameReportParser(Parser):
    def __init__(self, whitespace=None, nameguard=None, **kwargs):
        super(GameReportParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=None,
            **kwargs
        )

    @graken()
    def _pre_(self):
        self._token('<pre>')

    @graken()
    def _pre_close_(self):
        self._token('</pre>')

    @graken()
    def _tr_(self):
        self._token('<tr>')

    @graken()
    def _tr_close_(self):
        self._token('</tr>')

    @graken()
    def _td_(self):
        self._token('<td valign="top">')

    @graken()
    def _td_close_(self):
        self._token('</td>')

    @graken()
    def _p_(self):
        self._token('<p class="bnorm">')

    @graken()
    def _p_norm_(self):
        self._token('<p class="norm">')

    @graken()
    def _p_close_(self):
        self._token('</p>')

    @graken()
    def _table_(self):
        self._pattern(r'<table[^>]*>')

    @graken()
    def _table_close_(self):
        self._token('</table>')

    @graken()
    def _anything_but_font_close_(self):
        self._pattern(r'.*(?=<\/font>)')

    @graken()
    def _font_size_2_(self):
        self._token('<font size="2">')

    @graken()
    def _font_white_(self):
        self._token('<font color="#000000">')

    @graken()
    def _font_red_(self):
        self._token('<font color="#FF0000">')

    @graken()
    def _font_close_(self):
        self._token('</font>')

    @graken()
    def _short_name_(self):
        self._pattern(r"[A-Z]\.[A-Za-z\*\-\'\s]+")

    @graken()
    def _short_name_no_pos_(self):
        self._pattern(r"[A-Z]\.[A-Za-z\s\*\-\']+(?= (P|C|1B|2B|3B|SS|LF|CF|RF|PR|DH|PH))")

    @graken()
    def _short_name_no_result_(self):
        self._pattern(r"[A-Z]\.[A-Za-z\s\*\-\']+(?= (WIN|W|LOSS|L|HOLD|H|SAVE|S|BS|B|[0-9]))")

    @graken()
    def _last_name_(self):
        self._pattern(r"[A-Za-z\-\'\s\*]+")

    @graken()
    def _last_name_no_in_(self):
        self._pattern(r"[A-Za-z\-\'\s\*]+(?= In)")

    @graken()
    def _full_name_(self):
        self._pattern(r"[A-Za-z\.\-\'\s]+")

    @graken()
    def _full_name_no_injured_(self):
        self._pattern(r"[A-Za-z\.\s\-\']+(?= INJURED)")

    @graken()
    def _full_name_no_gem_event_(self):
        self._pattern(r"[A-Za-z\.\s\-\']+(?= (robbed|blocked|turns))")

    @graken()
    def _full_name_no_of_(self):
        self._pattern(r"[A-Za-z\.\s\-\']+(?= of)")

    @graken()
    def _city_(self):
        with self._choice():
            with self._option():
                self._token('Atlanta')
            with self._option():
                self._token('Boston')
            with self._option():
                self._token('Charlotte')
            with self._option():
                self._token('Chicago')
            with self._option():
                self._token('Cincinnati')
            with self._option():
                self._token('Cleveland')
            with self._option():
                self._token('Columbus')
            with self._option():
                self._token('Detroit')
            with self._option():
                self._token('Miami')
            with self._option():
                self._token('Montreal')
            with self._option():
                self._token('Nashville')
            with self._option():
                self._token('New Orleans')
            with self._option():
                self._token('New York')
            with self._option():
                self._token('Philadelphia')
            with self._option():
                self._token('St. Louis')
            with self._option():
                self._token('Saint Louis')
            with self._option():
                self._token('Steel City')
            with self._option():
                self._token('Washington')
            self._error('expecting one of: Atlanta Boston Charlotte Chicago Cincinnati Cleveland Columbus Detroit Miami Montreal Nashville New Orleans New York Philadelphia Saint Louis St. Louis Steel City Washington')

    @graken()
    def _city_caps_(self):
        with self._choice():
            with self._option():
                self._token('ATLANTA')
            with self._option():
                self._token('BOSTON')
            with self._option():
                self._token('CHARLOTTE')
            with self._option():
                self._token('CHICAGO')
            with self._option():
                self._token('CINCINNATI')
            with self._option():
                self._token('CLEVELAND')
            with self._option():
                self._token('COLUMBUS')
            with self._option():
                self._token('DETROIT')
            with self._option():
                self._token('MIAMI')
            with self._option():
                self._token('MONTREAL')
            with self._option():
                self._token('NASHVILLE')
            with self._option():
                self._token('NEW ORLEANS')
            with self._option():
                self._token('NEW YORK')
            with self._option():
                self._token('PHILADELPHIA')
            with self._option():
                self._token('ST. LOUIS')
            with self._option():
                self._token('SAINT LOUIS')
            with self._option():
                self._token('STEEL CITY')
            with self._option():
                self._token('WASHINGTON')
            self._error('expecting one of: ATLANTA BOSTON CHARLOTTE CHICAGO CINCINNATI CLEVELAND COLUMBUS DETROIT MIAMI MONTREAL NASHVILLE NEW ORLEANS NEW YORK PHILADELPHIA SAINT LOUIS ST. LOUIS STEEL CITY WASHINGTON')

    @graken()
    def _nickname_(self):
        with self._choice():
            with self._option():
                self._token('Crackers')
            with self._option():
                self._token('Blues')
            with self._option():
                self._token('Monarchs')
            with self._option():
                self._token('Northsiders')
            with self._option():
                self._token('Steamers')
            with self._option():
                self._token('Spiders')
            with self._option():
                self._token('Explorers')
            with self._option():
                self._token('Clutch')
            with self._option():
                self._token('Toros')
            with self._option():
                self._token('Souterrains')
            with self._option():
                self._token('Cats')
            with self._option():
                self._token('Mudbugs')
            with self._option():
                self._token('Knights')
            with self._option():
                self._token('Admirals')
            with self._option():
                self._token('Clydesdales')
            with self._option():
                self._token('Stogies')
            with self._option():
                self._token('Federals')
            self._error('expecting one of: Admirals Blues Cats Clutch Clydesdales Crackers Explorers Federals Knights Monarchs Mudbugs Northsiders Souterrains Spiders Steamers Stogies Toros')

    @graken()
    def _position_(self):
        with self._choice():
            with self._option():
                self._token('P')
            with self._option():
                self._token('C')
            with self._option():
                self._token('1B')
            with self._option():
                self._token('2B')
            with self._option():
                self._token('3B')
            with self._option():
                self._token('SS')
            with self._option():
                self._token('LF')
            with self._option():
                self._token('CF')
            with self._option():
                self._token('RF')
            with self._option():
                self._token('PR')
            with self._option():
                self._token('DH')
            with self._option():
                self._token('PH')
            self._error('expecting one of: 1B 2B 3B C CF DH LF P PH PR RF SS')

    @graken()
    def _parenthesized_position_(self):
        self._token('(')
        self._position_()
        self.ast['@'] = self.last_node
        self._token(')')

    @graken()
    def _year_(self):
        self._pattern(r'[0-9]{4}')

    @graken()
    def _mdy_(self):
        self._pattern(r'[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}')

    @graken()
    def _dash_(self):
        self._token('-')

    @graken()
    def _decimal_number_(self):
        self._pattern(r'[0-9]?\.?[0-9]+')

    @graken()
    def _not_a_number_(self):
        self._token('----')

    @graken()
    def _partial_inning_number_(self):
        self._pattern(r'([12]{1}\/3){0,1}')

    @graken()
    def _whole_number_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _whole_number_comma_(self):
        self._pattern(r'[0-9,]+')

    @graken()
    def _optionaless_(self):
        self._pattern(r's?')

    @graken()
    def _whitespace_(self):
        self._pattern(r'\s+')

    @graken()
    def _weekday_long_(self):
        with self._choice():
            with self._option():
                self._token('Sunday')
            with self._option():
                self._token('Monday')
            with self._option():
                self._token('Tuesday')
            with self._option():
                self._token('Wednesday')
            with self._option():
                self._token('Thursday')
            with self._option():
                self._token('Friday')
            with self._option():
                self._token('Saturday')
            self._error('expecting one of: Friday Monday Saturday Sunday Thursday Tuesday Wednesday')

    @graken()
    def _month_long_(self):
        with self._choice():
            with self._option():
                self._token('January')
            with self._option():
                self._token('February')
            with self._option():
                self._token('March')
            with self._option():
                self._token('April')
            with self._option():
                self._token('May')
            with self._option():
                self._token('June')
            with self._option():
                self._token('July')
            with self._option():
                self._token('August')
            with self._option():
                self._token('September')
            with self._option():
                self._token('October')
            with self._option():
                self._token('November')
            with self._option():
                self._token('December')
            self._error('expecting one of: April August December February January July June March May November October September')

    @graken()
    def _duration_(self):
        self._whole_number_()
        self.ast['hours'] = self.last_node
        self._token(':')
        self._whole_number_()
        self.ast['minutes'] = self.last_node

        self.ast._define(
            ['hours', 'minutes'],
            []
        )

    @graken()
    def _day_night_time_(self):
        with self._choice():
            with self._option():
                self._token('Day')
            with self._option():
                self._token('Night')
            self._error('expecting one of: Day Night')

    @graken()
    def _weather_(self):
        with self._choice():
            with self._option():
                self._token('Good')
            with self._option():
                self._token('Average')
            with self._option():
                self._token('Bad')
            self._error('expecting one of: Average Bad Good')

    @graken()
    def _long_date_(self):
        self._weekday_long_()
        self.ast['weekday'] = self.last_node
        self._token(',')
        self._month_long_()
        self.ast['month'] = self.last_node
        self._whole_ordinal_()
        self.ast['day'] = self.last_node
        self._whole_number_()
        self.ast['year'] = self.last_node

        self.ast._define(
            ['weekday', 'month', 'day', 'year'],
            []
        )

    @graken()
    def _whole_ordinal_(self):
        self._whole_number_()
        self.ast['@'] = self.last_node
        with self._group():
            with self._choice():
                with self._option():
                    self._token('st')
                with self._option():
                    self._token('nd')
                with self._option():
                    self._token('rd')
                with self._option():
                    self._token('th')
                self._error('expecting one of: nd rd st th')

    @graken()
    def _innings_pitched_number_(self):
        self._whole_number_()
        self.ast['whole'] = self.last_node
        with self._optional():
            self._partial_inning_number_()
            self.ast['part'] = self.last_node

        self.ast._define(
            ['whole', 'part'],
            []
        )

    @graken()
    def _half_inning_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('Top')
                with self._option():
                    self._token('Bot')
                self._error('expecting one of: Bot Top')
        self.ast['half'] = self.last_node
        self._whole_ordinal_()
        self.ast['number'] = self.last_node

        self.ast._define(
            ['half', 'number'],
            []
        )

    @graken()
    def _parenthesized_whole_ordinal_(self):
        self._token('(')
        self._whole_ordinal_()
        self.ast['@'] = self.last_node
        with self._optional():
            self._token(')')

    @graken()
    def _annual_team_(self):
        self._year_()
        self.ast['year'] = self.last_node
        self._city_()
        self.ast['city'] = self.last_node
        self._nickname_()
        self.ast['nickname'] = self.last_node

        self.ast._define(
            ['year', 'city', 'nickname'],
            []
        )

    @graken()
    def _boxscore_td_start_(self):
        self._token('<td valign="top">')

    @graken()
    def _boxscore_p_start_(self):
        self._token('<p class="bnorm">')

    @graken()
    def _boxscore_spacer_(self):
        self._token('<font color="#000000">')

        self._token('</font>')

    @graken()
    def _boxscore_header_(self):
        self._boxscore_td_start_()
        self._pre_()
        self._boxscore_p_start_()

    @graken()
    def _boxscore_matchup_(self):
        with self._optional():
            self._token('BOXSCORE:')
        self._annual_team_()
        self.ast['away'] = self.last_node
        with self._group():
            with self._choice():
                with self._option():
                    self._token('At')
                with self._option():
                    self._token('at')
                self._error('expecting one of: At at')
        self._annual_team_()
        self.ast['home'] = self.last_node
        with self._optional():
            self._mdy_()
            self.ast['date'] = self.last_node

        self.ast._define(
            ['away', 'home', 'date'],
            []
        )

    @graken()
    def _boxscore_matchup_header_(self):
        self._token('<font color="#FF0000">')

        self._boxscore_matchup_()
        self.ast['@'] = self.last_node
        self._token('</font>')

    @graken()
    def _boxscore_hitting_stat_label_(self):
        with self._choice():
            with self._option():
                self._token('AB')
            with self._option():
                self._token('R')
            with self._option():
                self._token('H')
            with self._option():
                self._token('RBI')
            with self._option():
                self._token('AVG')
            self._error('expecting one of: AB AVG H R RBI')

    @graken()
    def _boxscore_hitting_header_team_(self):
        self._nickname_()
        self.ast['nickname'] = self.last_node

        def block2():
            self._boxscore_hitting_stat_label_()
        self._closure(block2)
        self.ast['headers'] = self.last_node

        self.ast._define(
            ['nickname', 'headers'],
            []
        )

    @graken()
    def _boxscore_hitting_header_(self):
        self._token('<font color="#FF0000">')

        self._boxscore_hitting_header_team_()
        self.ast['away'] = self.last_node
        self._boxscore_hitting_header_team_()
        self.ast['home'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['away', 'home'],
            []
        )

    @graken()
    def _boxscore_hitting_sub_annotation_(self):
        self._pattern(r'[A-Z]?')

    @graken()
    def _boxscore_hitting_substitution_(self):
        self._boxscore_hitting_sub_annotation_()
        self.ast['@'] = self.last_node
        self._token('-')

    @graken()
    def _boxscore_hitting_position_(self):
        self._position_()
        self.ast['@'] = self.last_node
        with self._optional():
            self._token(',')

    @graken()
    def _boxscore_hitting_stat_line_(self):
        with self._optional():
            self._boxscore_hitting_substitution_()
        self.ast['substitution'] = self.last_node
        self._short_name_no_pos_()
        self.ast['player_name'] = self.last_node

        def block3():
            self._boxscore_hitting_position_()
        self._closure(block3)
        self.ast['positions'] = self.last_node

        def block5():
            with self._group():
                with self._choice():
                    with self._option():
                        self._decimal_number_()
                    with self._option():
                        self._not_a_number_()
                    self._error('no available options')
        self._closure(block5)
        self.ast['statistics'] = self.last_node

        self.ast._define(
            ['substitution', 'player_name', 'positions', 'statistics'],
            []
        )

    @graken()
    def _boxscore_hitting_player_line_(self):
        self._token('<font color="#000000">')


        def block1():
            self._boxscore_hitting_stat_line_()
        self._closure(block1)
        self.ast['players'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['players'],
            []
        )

    @graken()
    def _dashes_(self):
        self._pattern(r'[\-]{2,3}')

    @graken()
    def _boxscore_hitting_separator_(self):
        self._token('<font color="#000000">')


        def block0():
            self._dashes_()
        self._closure(block0)
        self._token('</font>')

    @graken()
    def _boxscore_hitting_total_line_(self):
        self._token('Totals')

        def block1():
            self._whole_number_()
        self._closure(block1)
        self.ast['totals'] = self.last_node

        self.ast._define(
            ['totals'],
            []
        )

    @graken()
    def _boxscore_hitting_totals_(self):
        self._token('<font color="#FF0000">')


        def block1():
            self._boxscore_hitting_total_line_()
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._token('</font>')

    @graken()
    def _boxscore_hitting_(self):
        self._boxscore_hitting_header_()
        self.ast['header'] = self.last_node

        def block2():
            self._boxscore_hitting_player_line_()
        self._closure(block2)
        self.ast['player_stats'] = self.last_node
        self._boxscore_hitting_separator_()
        self._boxscore_hitting_totals_()
        self.ast['team_stats'] = self.last_node

        self.ast._define(
            ['header', 'player_stats', 'team_stats'],
            []
        )

    @graken()
    def _boxscore_run_substitution_(self):
        self._token('<font color="#000000">')

        with self._optional():
            self._boxscore_hitting_substitution_()
        self.ast['substitution'] = self.last_node
        self._token('Pinch')
        self._token('Ran')
        self.ast['type'] = self.last_node
        self._token('For')
        self._last_name_no_in_()
        self.ast['player'] = self.last_node
        self._token('In')
        self._whole_ordinal_()
        self.ast['inning'] = self.last_node
        self._token('Inning')
        self._token('</font>')

        self.ast._define(
            ['substitution', 'type', 'player', 'inning'],
            []
        )

    @graken()
    def _boxscore_hit_substitution_(self):
        self._token('<font color="#000000">')

        with self._optional():
            self._boxscore_hitting_substitution_()
        self.ast['substitution'] = self.last_node
        self._token('Pinch')
        self._token('Hit')
        self.ast['type'] = self.last_node
        self._token('For')
        self._last_name_no_in_()
        self.ast['player'] = self.last_node
        self._token('In')
        self._whole_ordinal_()
        self.ast['inning'] = self.last_node
        self._token('Inning')
        self._token('</font>')

        self.ast._define(
            ['substitution', 'type', 'player', 'inning'],
            []
        )

    @graken()
    def _boxscore_defensive_substitution_(self):
        self._token('<font color="#000000">')

        with self._optional():
            self._boxscore_hitting_substitution_()
        self.ast['substitution'] = self.last_node
        self._token('Subbed')
        self._token('Defensively')
        self.ast['type'] = self.last_node
        self._parenthesized_position_()
        self.ast['position'] = self.last_node
        self._token('For')
        self._last_name_no_in_()
        self.ast['player'] = self.last_node
        self._token('In')
        self._whole_ordinal_()
        self.ast['inning'] = self.last_node
        self._token('Inning')
        self._token('</font>')

        self.ast._define(
            ['substitution', 'type', 'position', 'player', 'inning'],
            []
        )

    @graken()
    def _boxscore_dh_substitution_(self):
        self._token('<font color="#000000">')

        with self._optional():
            self._boxscore_hitting_substitution_()
        self.ast['substitution'] = self.last_node
        self._token('Subbed')
        self._parenthesized_position_()
        self.ast['position'] = self.last_node
        self._token('For')
        self._last_name_no_in_()
        self.ast['player'] = self.last_node
        self._token('In')
        self._whole_ordinal_()
        self.ast['inning'] = self.last_node
        self._token('Inning')
        self._token('</font>')

        self.ast._define(
            ['substitution', 'position', 'player', 'inning'],
            []
        )

    @graken()
    def _boxscore_substitution_(self):
        with self._choice():
            with self._option():
                self._boxscore_run_substitution_()
            with self._option():
                self._boxscore_hit_substitution_()
            with self._option():
                self._boxscore_defensive_substitution_()
            with self._option():
                self._boxscore_dh_substitution_()
            self._error('no available options')

    @graken()
    def _boxscore_injury_duration_(self):
        self._token('(for ')
        self._whole_number_()
        self.ast['@'] = self.last_node
        self._token('more')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('game)')
                with self._option():
                    self._token('games)')
                self._error('expecting one of: game) games)')

    @graken()
    def _boxscore_injury_(self):
        self._token('<font color="#000000">')

        self._token('INJURY:')
        self._full_name_no_injured_()
        self.ast['name'] = self.last_node
        self._token('INJURED')
        self._boxscore_injury_duration_()
        self.ast['duration'] = self.last_node
        self._token('in')
        self._whole_ordinal_()
        self.ast['inning'] = self.last_node
        self._token('inning')
        self._token('</font>')

        self.ast._define(
            ['name', 'duration', 'inning'],
            []
        )

    @graken()
    def _boxscore_team_inning_runs_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _boxscore_team_totals_(self):
        self._whole_number_()
        self.ast['runs'] = self.last_node
        self._whole_number_()
        self.ast['hits'] = self.last_node
        self._whole_number_()
        self.ast['errors'] = self.last_node

        self.ast._define(
            ['runs', 'hits', 'errors'],
            []
        )

    @graken()
    def _boxscore_team_(self):
        self._token('<font color="#000000">')

        self._nickname_()
        self.ast['nickname'] = self.last_node
        self._pattern(r'\.*')

        def block2():
            self._boxscore_team_inning_runs_()
        self._closure(block2)
        self.ast['runs'] = self.last_node
        self._token('-')
        self._boxscore_team_totals_()
        self.ast['totals'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['nickname', 'runs', 'totals'],
            []
        )

    @graken()
    def _boxscore_pitching_stat_label_(self):
        with self._choice():
            with self._option():
                self._token('IP')
            with self._option():
                self._token('H')
            with self._option():
                self._token('R')
            with self._option():
                self._token('ER')
            with self._option():
                self._token('BB')
            with self._option():
                self._token('SO')
            with self._option():
                self._token('HR')
            with self._option():
                self._token('PC')
            with self._option():
                self._token('ERA')
            with self._option():
                self._token('SCORESHEET')
            self._error('expecting one of: BB ER ERA H HR IP PC R SCORESHEET SO')

    @graken()
    def _record_(self):
        self._whole_number_()
        self.ast['wins'] = self.last_node
        self._token('-')
        self._whole_number_()
        self.ast['losses'] = self.last_node

        self.ast._define(
            ['wins', 'losses'],
            []
        )

    @graken()
    def _parenthesized_record_(self):
        self._token('(')
        self._record_()
        self.ast['@'] = self.last_node
        with self._optional():
            self._token(')')

    @graken()
    def _boxscore_pitching_header_team_(self):
        self._token('<font color="#FF0000">')

        self._nickname_()
        self.ast['nickname'] = self.last_node
        with self._optional():
            self._parenthesized_record_()
            self.ast['record'] = self.last_node

        def block3():
            self._boxscore_pitching_stat_label_()
        self._closure(block3)
        self.ast['headers'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['nickname', 'record', 'headers'],
            []
        )

    @graken()
    def _boxscore_pitching_result_win_(self):
        self._token('WIN')
        self.ast['@'] = self.last_node
        with self._optional():
            self._parenthesized_record_()

    @graken()
    def _boxscore_pitching_result_win_abv_(self):
        self._token('W')
        self.ast['@'] = self.last_node
        self._parenthesized_record_()

    @graken()
    def _boxscore_pitching_result_loss_(self):
        self._token('LOSS')
        self.ast['@'] = self.last_node
        with self._optional():
            self._parenthesized_record_()

    @graken()
    def _boxscore_pitching_result_loss_abv_(self):
        self._token('L')
        self.ast['@'] = self.last_node
        self._parenthesized_record_()

    @graken()
    def _boxscore_pitching_result_hold_(self):
        self._token('HOLD')
        self.ast['@'] = self.last_node
        self._parenthesized_whole_ordinal_()

    @graken()
    def _boxscore_pitching_result_hold_abv_(self):
        self._token('H')
        self.ast['@'] = self.last_node
        self._parenthesized_whole_ordinal_()

    @graken()
    def _boxscore_pitching_result_save_(self):
        self._token('SAVE')
        self.ast['@'] = self.last_node
        self._parenthesized_whole_ordinal_()

    @graken()
    def _boxscore_pitching_result_save_abv_(self):
        self._token('S')
        self.ast['@'] = self.last_node
        self._parenthesized_whole_ordinal_()

    @graken()
    def _boxscore_pitching_result_blown_save_(self):
        self._token('BS')
        self.ast['@'] = self.last_node
        self._parenthesized_whole_ordinal_()

    @graken()
    def _boxscore_pitching_result_blown_save_abv_(self):
        self._token('B')
        self.ast['@'] = self.last_node
        self._parenthesized_whole_ordinal_()

    @graken()
    def _boxscore_pitching_result_stat_(self):
        with self._choice():
            with self._option():
                self._boxscore_pitching_result_loss_()
            with self._option():
                self._boxscore_pitching_result_win_()
            with self._option():
                self._boxscore_pitching_result_win_abv_()
            with self._option():
                self._boxscore_pitching_result_loss_abv_()
            with self._option():
                self._boxscore_pitching_result_hold_()
            with self._option():
                self._boxscore_pitching_result_hold_abv_()
            with self._option():
                self._boxscore_pitching_result_save_()
            with self._option():
                self._boxscore_pitching_result_save_abv_()
            with self._option():
                self._boxscore_pitching_result_blown_save_()
            with self._option():
                self._boxscore_pitching_result_blown_save_abv_()
            self._error('no available options')

    @graken()
    def _boxscore_pitching_stat_line_(self):
        self._token('<font color="#000000">')

        self._short_name_no_result_()
        self.ast['player_name'] = self.last_node

        def block2():
            self._boxscore_pitching_result_stat_()
        self._closure(block2)
        self.ast['result_stats'] = self.last_node
        self._innings_pitched_number_()
        self.ast['ip'] = self.last_node

        def block5():
            with self._group():
                with self._choice():
                    with self._option():
                        self._decimal_number_()
                    with self._option():
                        self._not_a_number_()
                    self._error('no available options')
        self._closure(block5)
        self.ast['statistics'] = self.last_node
        with self._optional():

            def block8():
                self._scoresheet_index_()
            self._closure(block8)
            self.ast['scoresheet'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['player_name', 'result_stats', 'ip', 'statistics', 'scoresheet'],
            []
        )

    @graken()
    def _scoresheet_index_(self):
        self._pattern(r'[A-Z]{1}[0-9]+')

    @graken()
    def _boxscore_pitching_total_line_(self):
        self._token('<font color="#FF0000">')

        self._token('Totals')
        self._innings_pitched_number_()
        self.ast['ip'] = self.last_node

        def block2():
            self._decimal_number_()
        self._closure(block2)
        self.ast['statistics'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['ip', 'statistics'],
            []
        )

    @graken()
    def _boxscore_pitching_team_(self):
        self._boxscore_pitching_header_team_()
        self.ast['header'] = self.last_node

        def block2():
            self._boxscore_pitching_stat_line_()
        self._closure(block2)
        self.ast['pitchers'] = self.last_node
        self._boxscore_pitching_total_line_()
        self.ast['totals'] = self.last_node

        self.ast._define(
            ['header', 'pitchers', 'totals'],
            []
        )

    @graken()
    def _boxscore_pitching_(self):
        self._boxscore_pitching_team_()
        self.ast['away'] = self.last_node
        self._boxscore_spacer_()
        self._boxscore_pitching_team_()
        self.ast['home'] = self.last_node

        self.ast._define(
            ['away', 'home'],
            []
        )

    @graken()
    def _attendance_data_(self):
        self._token('ATTENDANCE-')
        self._whole_number_comma_()
        self.ast['@'] = self.last_node

    @graken()
    def _long_date_data_(self):
        self._token('DATE-')
        self._long_date_()
        self.ast['@'] = self.last_node

    @graken()
    def _time_data_(self):
        self._token('TIME-')
        self._day_night_time_()
        self.ast['@'] = self.last_node

    @graken()
    def _weather_data_(self):
        self._token('WEATHER-')
        self._weather_()
        self.ast['@'] = self.last_node

    @graken()
    def _duration_data_(self):
        self._token('T-')
        self._duration_()
        self.ast['@'] = self.last_node

    @graken()
    def _umpire_name_(self):
        self._full_name_()
        self.ast['@'] = self.last_node
        with self._optional():
            self._token(',')

    @graken()
    def _umpire_data_(self):
        self._token('<font color="#000000">')

        self._token('UMPIRES-')

        def block1():
            self._umpire_name_()
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._token('</font>')

    @graken()
    def _peripheral_game_data_(self):
        self._token('<font color="#000000">')

        self._attendance_data_()
        self.ast['attendance'] = self.last_node
        with self._optional():
            self._long_date_data_()
            self.ast['date'] = self.last_node
        self._time_data_()
        self.ast['time'] = self.last_node
        self._weather_data_()
        self.ast['weather'] = self.last_node
        self._token('</font>')

        with self._optional():
            self._umpire_data_()
            self.ast['umpires'] = self.last_node
        self._token('<font color="#000000">')

        self._duration_data_()
        self.ast['duration'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['attendance', 'date', 'time', 'weather', 'umpires', 'duration'],
            []
        )

    @graken()
    def _boxscore_team_count_colon_(self):
        self._nickname_()
        self.ast['nickname'] = self.last_node
        self._token(':')
        self._whole_number_()
        self.ast['count'] = self.last_node

        self.ast._define(
            ['nickname', 'count'],
            []
        )

    @graken()
    def _boxscore_team_basic_rate_(self):
        self._nickname_()
        self.ast['nickname'] = self.last_node
        self._token(':')
        self._whole_number_()
        self.ast['count'] = self.last_node
        self._token('for')
        self._whole_number_()
        self.ast['opportunities'] = self.last_node

        self.ast._define(
            ['nickname', 'count', 'opportunities'],
            []
        )

    @graken()
    def _boxscore_team_statistic_details_name_(self):
        with self._choice():
            with self._option():
                self._token('LEFT ON BASE')
            with self._option():
                self._token('DOUBLE PLAYS')
            with self._option():
                self._token('TRIPLE PLAYS')
            self._error('expecting one of: DOUBLE PLAYS LEFT ON BASE TRIPLE PLAYS')

    @graken()
    def _boxscore_team_statistic_details_(self):
        self._token('<font color="#000000">')

        self._boxscore_team_statistic_details_name_()
        self.ast['name'] = self.last_node
        self._token('-')
        self._boxscore_team_count_colon_()
        self.ast['away'] = self.last_node
        self._boxscore_team_count_colon_()
        self.ast['home'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['name', 'away', 'home'],
            []
        )

    @graken()
    def _boxscore_player_statistic_detail_(self):
        with self._optional():
            self._token('<font color="#000000">')
        self._short_name_()
        self.ast['name'] = self.last_node
        with self._optional():
            self._token('-')
        with self._optional():
            self._whole_number_()
            self.ast['game_count'] = self.last_node
        with self._optional():
            self._parenthesized_whole_ordinal_()
            self.ast['season_count'] = self.last_node
        with self._optional():
            self._token(',')
        with self._optional():
            self._token('</font>')

        self.ast._define(
            ['name', 'game_count', 'season_count'],
            []
        )

    @graken()
    def _boxscore_player_statistic_details_name_(self):
        with self._choice():
            with self._option():
                self._token('ERRORS')
            with self._option():
                self._token('DOUBLES')
            with self._option():
                self._token('TRIPLES')
            with self._option():
                self._token('HOME RUNS')
            with self._option():
                self._token('Homeruns')
            with self._option():
                self._token('SACRIFICE HITS')
            with self._option():
                self._token('SACRIFICE FLIES')
            with self._option():
                self._token('RBIs')
            with self._option():
                self._token('STOLEN BASES')
            with self._option():
                self._token('CAUGHT STEALING')
            with self._option():
                self._token('WALKS')
            with self._option():
                self._token('HIT BY PITCH')
            with self._option():
                self._token('STRIKE OUTS')
            with self._option():
                self._token('GIDP')
            with self._option():
                self._token('CATCHERS INTERFERENCE')
            with self._option():
                self._token('PASSED BALLS')
            with self._option():
                self._token('BALKS')
            with self._option():
                self._token('WILD PITCHES')
            with self._option():
                self._token('2-out RBI')
            with self._option():
                self._token('RLISP 2-out')
            self._error('expecting one of: 2-out RBI BALKS CATCHERS INTERFERENCE CAUGHT STEALING DOUBLES ERRORS GIDP HIT BY PITCH HOME RUNS Homeruns PASSED BALLS RBIs RLISP 2-out SACRIFICE FLIES SACRIFICE HITS STOLEN BASES STRIKE OUTS TRIPLES WALKS WILD PITCHES')

    @graken()
    def _boxscore_statistic_details_(self):
        self._token('<font color="#000000">')

        self._boxscore_player_statistic_details_name_()
        self.ast['name'] = self.last_node
        self._token('-')

        def block2():
            self._boxscore_player_statistic_detail_()
        self._closure(block2)
        self.ast['data'] = self.last_node
        with self._optional():
            self._token('</font>')

        self.ast._define(
            ['name', 'data'],
            []
        )

    @graken()
    def _boxscore_risp_details_(self):
        self._token('<font color="#000000">')

        self._token('TEAM RISP')
        self._token('-')
        self._boxscore_team_basic_rate_()
        self.ast['away'] = self.last_node
        self._boxscore_team_basic_rate_()
        self.ast['home'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['away', 'home'],
            []
        )

    @graken()
    def _gem_event_(self):
        self._pattern(r'[A-Za-z\s]+')

    @graken()
    def _gem_details_(self):
        self._full_name_no_gem_event_()
        self.ast['gemmer'] = self.last_node
        with self._group():
            with self._choice():
                with self._option():
                    self._token('robbed')
                with self._option():
                    self._token('blocked the plate')
                with self._option():
                    self._token('turns')
                self._error('expecting one of: blocked the plate robbed turns')
        self.ast['action'] = self.last_node
        with self._optional():
            self._token(',')
        with self._optional():
            self._full_name_no_of_()
            self.ast['gemmee'] = self.last_node
        with self._optional():
            self._token('of a')
        with self._optional():
            self._token('n')
        self._gem_event_()
        self.ast['event'] = self.last_node

        self.ast._define(
            ['gemmer', 'action', 'gemmee', 'event'],
            []
        )

    @graken()
    def _boxscore_web_gem_(self):
        with self._optional():
            self._token('<font color="#000000">')
        self._half_inning_()
        self.ast['inning'] = self.last_node
        self._token(':')
        self._gem_details_()
        self.ast['gem_details'] = self.last_node
        with self._group():
            with self._choice():
                with self._option():
                    self._token('.')
                with self._option():
                    self._token('!')
                self._error('expecting one of: ! .')
        with self._optional():
            self._token('</font>')

        self.ast._define(
            ['inning', 'gem_details'],
            []
        )

    @graken()
    def _boxscore_web_gems_(self):
        self._token('<font color="#000000">')

        self._token('WEB GEMS')
        self._token('-')

        def block1():
            self._boxscore_web_gem_()
        self._closure(block1)
        self.ast['@'] = self.last_node
        with self._optional():
            self._token('</font>')

    @graken()
    def _boxscore_(self):
        self._boxscore_matchup_header_()
        self.ast['matchup'] = self.last_node
        self._boxscore_spacer_()
        self._boxscore_hitting_()
        self.ast['hitting_boxscore'] = self.last_node
        self._boxscore_spacer_()

        def block3():
            self._boxscore_substitution_()
        self._closure(block3)
        self.ast['substitutions'] = self.last_node
        with self._optional():
            self._boxscore_spacer_()

        def block5():
            self._boxscore_injury_()
        self._closure(block5)
        self.ast['injuries'] = self.last_node
        with self._optional():
            self._boxscore_spacer_()

        def block7():
            self._boxscore_team_()
        self._closure(block7)
        self.ast['team_boxscore'] = self.last_node
        self._boxscore_spacer_()

        def block9():
            self._boxscore_pitching_()
        self._closure(block9)
        self.ast['pitching_boxscore'] = self.last_node
        self._boxscore_spacer_()
        self._peripheral_game_data_()
        self.ast['peripheral_game_data'] = self.last_node

        def block12():
            self._boxscore_team_statistic_details_()
        self._closure(block12)
        self.ast['team_statistics_details'] = self.last_node

        def block14():
            self._boxscore_statistic_details_()
        self._closure(block14)
        self.ast['player_statistics_details'] = self.last_node
        with self._optional():
            self._boxscore_risp_details_()
            self.ast['team_risp_details'] = self.last_node
        with self._optional():
            self._boxscore_web_gems_()
            self.ast['web_gems'] = self.last_node

        self.ast._define(
            ['matchup', 'hitting_boxscore', 'substitutions', 'injuries', 'team_boxscore', 'pitching_boxscore', 'peripheral_game_data', 'team_statistics_details', 'player_statistics_details', 'team_risp_details', 'web_gems'],
            []
        )

    @graken()
    def _boxscore_data_(self):
        self._td_()
        self._pre_()
        self._p_()
        self._boxscore_()
        self.ast['@'] = self.last_node
        self._p_close_()
        self._pre_close_()
        self._td_close_()

    @graken()
    def _boxscore_row_(self):
        self._tr_()

        def block1():
            self._boxscore_data_()
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._tr_close_()

    @graken()
    def _page_break_(self):
        self._token("<p style='page-break-before:always' ></p>")

    @graken()
    def _boxscore_table_(self):
        self._table_()

        def block1():
            self._boxscore_row_()
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._table_close_()

    @graken()
    def _boxscore_all_(self):
        self._page_break_()

        def block1():
            self._boxscore_table_()
        self._closure(block1)
        self.ast['@'] = self.last_node

    @graken()
    def _game_story_header_(self):
        self._token('<font color="#FF0000">')

        self._city_caps_()
        self.ast['away'] = self.last_node
        self._token('AT')
        self._city_caps_()
        self.ast['home'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['away', 'home'],
            []
        )

    @graken()
    def _game_story_pitcher_decision_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('Win')
                with self._option():
                    self._token('Loss')
                self._error('expecting one of: Loss Win')
        self.ast['type'] = self.last_node
        self._token(':')
        self._last_name_()
        self.ast['player'] = self.last_node
        self._parenthesized_record_()
        self.ast['record'] = self.last_node

        self.ast._define(
            ['type', 'player', 'record'],
            []
        )

    @graken()
    def _game_story_pitcher_save_(self):
        self._token('Save')
        self.ast['type'] = self.last_node
        self._token(':')
        self._last_name_()
        self.ast['player'] = self.last_node
        self._parenthesized_whole_ordinal_()
        self.ast['season_count'] = self.last_node

        self.ast._define(
            ['type', 'player', 'season_count'],
            []
        )

    @graken()
    def _game_story_pitcher_stats_(self):
        self._token('<font color="#000000">')

        self._game_story_pitcher_decision_()
        self.ast['winning_pitcher'] = self.last_node
        self._game_story_pitcher_decision_()
        self.ast['losing_pitcher'] = self.last_node
        with self._optional():
            self._game_story_pitcher_save_()
            self.ast['save_pitcher'] = self.last_node
        self._token('</font>')

        self.ast._define(
            ['winning_pitcher', 'losing_pitcher', 'save_pitcher'],
            []
        )

    @graken()
    def _text_no_close_font_(self):
        self._pattern(r"[A-Za-z0-9'\s\(\)\!\?\.\,\/\-\;\*]*(?=<\/font>)")

    @graken()
    def _game_story_recap_line_(self):
        self._token('<font color="#000000">')

        self._text_no_close_font_()
        self.ast['@'] = self.last_node
        self._token('</font>')

    @graken()
    def _game_story_recap_(self):

        def block1():
            self._game_story_recap_line_()
        self._closure(block1)
        self.ast['@'] = self.last_node

    @graken()
    def _game_story_(self):
        with self._optional():
            self._boxscore_spacer_()
        self._game_story_header_()
        self.ast['matchup'] = self.last_node
        self._boxscore_team_()
        self.ast['away'] = self.last_node
        self._boxscore_team_()
        self.ast['home'] = self.last_node
        self._game_story_pitcher_stats_()
        self.ast['pitcher_stats'] = self.last_node
        with self._optional():
            self._boxscore_statistic_details_()
            self.ast['hitter_stats'] = self.last_node
        self._boxscore_spacer_()
        self._game_story_recap_()
        self.ast['recap'] = self.last_node

        self.ast._define(
            ['matchup', 'away', 'home', 'pitcher_stats', 'hitter_stats', 'recap'],
            []
        )

    @graken()
    def _game_story_data_(self):
        self._td_()
        self._pre_()
        self._p_norm_()

        def block1():
            self._game_story_()
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._p_close_()
        self._pre_close_()
        self._td_close_()

    @graken()
    def _game_story_row_(self):
        self._tr_()

        def block1():
            self._game_story_data_()
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._tr_close_()

    @graken()
    def _game_story_table_(self):
        self._table_()

        def block1():
            self._game_story_row_()
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._table_close_()

    @graken()
    def _scoresheet_line_(self):
        self._token('<font color="#000000">')

        self._anything_but_font_close_()
        self._token('</font>')

    @graken()
    def _scoresheet_matchup_header_(self):
        self._token('<font color="#FF0000">')

        self._token('SCORESHEET:')
        self._boxscore_matchup_()
        self._token('</font>')

    @graken()
    def _scoresheet_(self):
        self._scoresheet_matchup_header_()

        def block0():
            self._scoresheet_line_()
        self._closure(block0)
        with self._optional():
            self._token('</font>')

    @graken()
    def _full_recap_(self):
        self._pre_()
        self._font_size_2_()

        def block1():
            self._boxscore_()
        self._closure(block1)
        self.ast['boxscores'] = self.last_node
        with self._optional():

            def block3():
                self._game_story_recap_()
            self._closure(block3)
            self.ast['game_stories'] = self.last_node
        with self._optional():
            self._font_close_()
        with self._optional():
            self._scoresheet_()
        with self._optional():

            def block4():
                self._boxscore_spacer_()
            self._closure(block4)
        with self._optional():
            self._scoresheet_()
        self._pre_close_()

        self.ast._define(
            ['boxscores', 'game_stories'],
            []
        )


class GameReportSemantics(object):
    def pre(self, ast):
        return ast

    def pre_close(self, ast):
        return ast

    def tr(self, ast):
        return ast

    def tr_close(self, ast):
        return ast

    def td(self, ast):
        return ast

    def td_close(self, ast):
        return ast

    def p(self, ast):
        return ast

    def p_norm(self, ast):
        return ast

    def p_close(self, ast):
        return ast

    def table(self, ast):
        return ast

    def table_close(self, ast):
        return ast

    def anything_but_font_close(self, ast):
        return ast

    def font_size_2(self, ast):
        return ast

    def font_white(self, ast):
        return ast

    def font_red(self, ast):
        return ast

    def font_close(self, ast):
        return ast

    def short_name(self, ast):
        return ast

    def short_name_no_pos(self, ast):
        return ast

    def short_name_no_result(self, ast):
        return ast

    def last_name(self, ast):
        return ast

    def last_name_no_in(self, ast):
        return ast

    def full_name(self, ast):
        return ast

    def full_name_no_injured(self, ast):
        return ast

    def full_name_no_gem_event(self, ast):
        return ast

    def full_name_no_of(self, ast):
        return ast

    def city(self, ast):
        return ast

    def city_caps(self, ast):
        return ast

    def nickname(self, ast):
        return ast

    def position(self, ast):
        return ast

    def parenthesized_position(self, ast):
        return ast

    def year(self, ast):
        return ast

    def mdy(self, ast):
        return ast

    def dash(self, ast):
        return ast

    def decimal_number(self, ast):
        return ast

    def not_a_number(self, ast):
        return ast

    def partial_inning_number(self, ast):
        return ast

    def whole_number(self, ast):
        return ast

    def whole_number_comma(self, ast):
        return ast

    def optionaless(self, ast):
        return ast

    def whitespace(self, ast):
        return ast

    def weekday_long(self, ast):
        return ast

    def month_long(self, ast):
        return ast

    def duration(self, ast):
        return ast

    def day_night_time(self, ast):
        return ast

    def weather(self, ast):
        return ast

    def long_date(self, ast):
        return ast

    def whole_ordinal(self, ast):
        return ast

    def innings_pitched_number(self, ast):
        return ast

    def half_inning(self, ast):
        return ast

    def parenthesized_whole_ordinal(self, ast):
        return ast

    def annual_team(self, ast):
        return ast

    def boxscore_td_start(self, ast):
        return ast

    def boxscore_p_start(self, ast):
        return ast

    def boxscore_spacer(self, ast):
        return ast

    def boxscore_header(self, ast):
        return ast

    def boxscore_matchup(self, ast):
        return ast

    def boxscore_matchup_header(self, ast):
        return ast

    def boxscore_hitting_stat_label(self, ast):
        return ast

    def boxscore_hitting_header_team(self, ast):
        return ast

    def boxscore_hitting_header(self, ast):
        return ast

    def boxscore_hitting_sub_annotation(self, ast):
        return ast

    def boxscore_hitting_substitution(self, ast):
        return ast

    def boxscore_hitting_position(self, ast):
        return ast

    def boxscore_hitting_stat_line(self, ast):
        return ast

    def boxscore_hitting_player_line(self, ast):
        return ast

    def dashes(self, ast):
        return ast

    def boxscore_hitting_separator(self, ast):
        return ast

    def boxscore_hitting_total_line(self, ast):
        return ast

    def boxscore_hitting_totals(self, ast):
        return ast

    def boxscore_hitting(self, ast):
        return ast

    def boxscore_run_substitution(self, ast):
        return ast

    def boxscore_hit_substitution(self, ast):
        return ast

    def boxscore_defensive_substitution(self, ast):
        return ast

    def boxscore_dh_substitution(self, ast):
        return ast

    def boxscore_substitution(self, ast):
        return ast

    def boxscore_injury_duration(self, ast):
        return ast

    def boxscore_injury(self, ast):
        return ast

    def boxscore_team_inning_runs(self, ast):
        return ast

    def boxscore_team_totals(self, ast):
        return ast

    def boxscore_team(self, ast):
        return ast

    def boxscore_pitching_stat_label(self, ast):
        return ast

    def record(self, ast):
        return ast

    def parenthesized_record(self, ast):
        return ast

    def boxscore_pitching_header_team(self, ast):
        return ast

    def boxscore_pitching_result_win(self, ast):
        return ast

    def boxscore_pitching_result_win_abv(self, ast):
        return ast

    def boxscore_pitching_result_loss(self, ast):
        return ast

    def boxscore_pitching_result_loss_abv(self, ast):
        return ast

    def boxscore_pitching_result_hold(self, ast):
        return ast

    def boxscore_pitching_result_hold_abv(self, ast):
        return ast

    def boxscore_pitching_result_save(self, ast):
        return ast

    def boxscore_pitching_result_save_abv(self, ast):
        return ast

    def boxscore_pitching_result_blown_save(self, ast):
        return ast

    def boxscore_pitching_result_blown_save_abv(self, ast):
        return ast

    def boxscore_pitching_result_stat(self, ast):
        return ast

    def boxscore_pitching_stat_line(self, ast):
        return ast

    def scoresheet_index(self, ast):
        return ast

    def boxscore_pitching_total_line(self, ast):
        return ast

    def boxscore_pitching_team(self, ast):
        return ast

    def boxscore_pitching(self, ast):
        return ast

    def attendance_data(self, ast):
        return ast

    def long_date_data(self, ast):
        return ast

    def time_data(self, ast):
        return ast

    def weather_data(self, ast):
        return ast

    def duration_data(self, ast):
        return ast

    def umpire_name(self, ast):
        return ast

    def umpire_data(self, ast):
        return ast

    def peripheral_game_data(self, ast):
        return ast

    def boxscore_team_count_colon(self, ast):
        return ast

    def boxscore_team_basic_rate(self, ast):
        return ast

    def boxscore_team_statistic_details_name(self, ast):
        return ast

    def boxscore_team_statistic_details(self, ast):
        return ast

    def boxscore_player_statistic_detail(self, ast):
        return ast

    def boxscore_player_statistic_details_name(self, ast):
        return ast

    def boxscore_statistic_details(self, ast):
        return ast

    def boxscore_risp_details(self, ast):
        return ast

    def gem_event(self, ast):
        return ast

    def gem_details(self, ast):
        return ast

    def boxscore_web_gem(self, ast):
        return ast

    def boxscore_web_gems(self, ast):
        return ast

    def boxscore(self, ast):
        return ast

    def boxscore_data(self, ast):
        return ast

    def boxscore_row(self, ast):
        return ast

    def page_break(self, ast):
        return ast

    def boxscore_table(self, ast):
        return ast

    def boxscore_all(self, ast):
        return ast

    def game_story_header(self, ast):
        return ast

    def game_story_pitcher_decision(self, ast):
        return ast

    def game_story_pitcher_save(self, ast):
        return ast

    def game_story_pitcher_stats(self, ast):
        return ast

    def text_no_close_font(self, ast):
        return ast

    def game_story_recap_line(self, ast):
        return ast

    def game_story_recap(self, ast):
        return ast

    def game_story(self, ast):
        return ast

    def game_story_data(self, ast):
        return ast

    def game_story_row(self, ast):
        return ast

    def game_story_table(self, ast):
        return ast

    def scoresheet_line(self, ast):
        return ast

    def scoresheet_matchup_header(self, ast):
        return ast

    def scoresheet(self, ast):
        return ast

    def full_recap(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = GameReportParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in GameReportParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for GameReport.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )

